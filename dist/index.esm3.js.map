{"version":3,"file":"index.esm3.js","sources":["../src/components/ui/Input.tsx"],"sourcesContent":["import React, { forwardRef, useState, useRef, memo, useEffect, FC, ChangeEvent, FocusEvent } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { useTheme } from '../../providers/ThemeProvider';\nimport { Eye, EyeOff, X, Check } from 'lucide-react';\n\n// Define theme type\ninterface ThemeState {\n  theme: string;\n  themeObject: Record<string, any>;\n}\n\n// Input wrapper variants\nconst inputWrapperVariants = cva(\n  'relative transition-all duration-200',\n  {\n    variants: {\n      fullWidth: {\n        true: 'w-full',\n        false: 'w-auto',\n      },\n    },\n    defaultVariants: {\n      fullWidth: true,\n    },\n  }\n);\n\n// Label variants\nconst labelVariants = cva(\n  'block text-sm font-medium transition-all duration-200',\n  {\n    variants: {\n      state: {\n        default: 'text-foreground-secondary',\n        error: 'text-red-500',\n        success: 'text-green-500',\n        focused: 'text-primary-base',\n      },\n      effect: {\n        none: 'mb-1.5',\n        float: 'transform origin-top-left absolute left-0 top-0',\n      },\n      variant: {\n        default: '',\n        filled: '',\n        outline: '',\n        underline: '',\n        glass: 'text-foreground-secondary',\n        'glass-premium': 'text-foreground-primary',\n        'glass-frost': 'text-foreground-primary/90',\n      }\n    },\n    defaultVariants: {\n      state: 'default',\n      effect: 'none',\n      variant: 'default',\n    },\n  }\n);\n\n// Input variants with enhanced options\nconst inputVariants = cva(\n  // Base styles - improved focus handling and transitions\n  'w-full transition-all duration-200 focus:outline-none disabled:cursor-not-allowed disabled:opacity-60 placeholder:opacity-60',\n  {\n    variants: {\n      // Input variants with enhanced glassmorphism options\n      variant: {\n        // Default input\n        default: 'bg-background-secondary border border-border focus:border-border-focus text-foreground-primary',\n        \n        // Filled input with improved hover/focus states\n        filled: 'bg-background-tertiary border border-transparent hover:bg-background-secondary focus:bg-background-secondary focus:border-border-focus text-foreground-primary',\n        \n        // Outline input with transparent background\n        outline: 'bg-transparent border border-border focus:border-border-focus text-foreground-primary',\n        \n        // Underline input (only bottom border)\n        underline: 'bg-transparent border-0 border-b-2 border-border rounded-none focus:border-border-focus text-foreground-primary',\n        \n        // Glass effect input - standard\n        glass: 'backdrop-blur-md bg-white/10 border border-white/10 focus:border-white/30 text-foreground-primary placeholder:text-foreground-secondary/70',\n        \n        // Premium glass effect - enhanced blur and better borders\n        'glass-premium': 'backdrop-blur-xl bg-white/5 border border-white/20 focus:border-white/40 text-white placeholder:text-white/60',\n        \n        // Frosted glass effect - more opacity\n        'glass-frost': 'backdrop-blur-xl bg-white/10 border-t border-l border-white/30 border-r border-b border-white/10 text-white placeholder:text-white/60',\n        \n        // Dark glass effect - darker background\n        'glass-dark': 'backdrop-blur-md bg-black/40 border border-white/10 focus:border-white/30 text-white placeholder:text-white/60',\n        \n        // Gradient glass effect\n        'glass-gradient': 'backdrop-blur-md bg-gradient-to-br from-primary/10 to-accent-purple/10 border border-white/20 focus:border-white/40 text-white placeholder:text-white/60',\n        \n        // Solid input\n        solid: 'bg-background-tertiary border border-border focus:border-border-focus text-foreground-primary',\n        \n        // Modern minimalist style\n        'modern': 'bg-background-secondary/50 border-none shadow-sm focus:shadow-md text-foreground-primary',\n        \n        // Material design inspired\n        'material': 'bg-transparent border-b-2 border-border px-0 focus:border-primary text-foreground-primary',\n        \n        // Neumorphic light\n        'neumorphic-light': 'bg-[#e0e5ec] text-gray-700 border-none shadow-[inset_2px_2px_5px_#b8b9be,inset_-3px_-3px_7px_#fff] focus:shadow-[inset_1px_1px_2px_#b8b9be,inset_-1px_-1px_2px_#fff]',\n        \n        // Neumorphic dark\n        'neumorphic-dark': 'bg-[#2a2d3e] text-gray-100 border-none shadow-[inset_2px_2px_5px_#1e2030,inset_-3px_-3px_7px_#363b50] focus:shadow-[inset_1px_1px_2px_#1e2030,inset_-1px_-1px_2px_#363b50]',\n      },\n      \n      // Input padding with more options\n      padding: {\n        xs: 'px-2 py-1 text-xs',\n        sm: 'px-2.5 py-1.5 text-sm',\n        md: 'px-3 py-2 text-base',\n        lg: 'px-4 py-2.5 text-lg',\n        xl: 'px-5 py-3 text-xl',\n      },\n      \n      // Input roundedness with more options\n      rounded: {\n        none: 'rounded-none',\n        xs: 'rounded-sm',\n        sm: 'rounded',\n        md: 'rounded-md',\n        lg: 'rounded-lg',\n        xl: 'rounded-xl',\n        '2xl': 'rounded-2xl',\n        full: 'rounded-full',\n      },\n      \n      // Enhanced special effects\n      effect: {\n        none: '',\n        glow: 'focus:shadow-blue-glow focus:border-primary/70',\n        'purple-glow': 'focus:shadow-purple-glow focus:border-purple-500/70',\n        'cyan-glow': 'focus:shadow-[0_0_15px_rgba(6,182,212,0.5)] focus:border-cyan-500/70',\n        'multi-glow': 'focus:shadow-multi-glow',\n        gradientBorder: 'gradient-border-1',\n        rainbowBorder: 'rainbow-border-1',\n        shimmer: 'overflow-hidden after:absolute after:inset-0 after:w-full after:h-full after:-translate-x-full focus:after:animate-shimmer-contained after:bg-gradient-to-r after:from-transparent after:via-white/10 after:to-transparent',\n        float: 'focus:-translate-y-1 focus:shadow-md',\n        scale: 'focus:scale-[1.02] origin-center',\n        'focus-ring': 'focus:ring-2 focus:ring-offset-2 focus:ring-primary',\n      },\n      \n      // Input state - combined with variant\n      state: {\n        default: '',\n        error: 'border-red-500/70 focus:border-red-500 focus:ring-red-500/50',\n        success: 'border-green-500/70 focus:border-green-500 focus:ring-green-500/50',\n        focused: 'border-primary-base',\n      },\n      \n      // Input size - height control for better vertical alignment\n      size: {\n        xs: 'h-7',\n        sm: 'h-8',\n        md: 'h-10',\n        lg: 'h-12',\n        xl: 'h-14',\n      },\n    },\n    compoundVariants: [\n      // Glass effect with glow combinations\n      {\n        variant: 'glass',\n        effect: 'glow',\n        className: 'focus:shadow-blue-glow focus:border-blue-400/50'\n      },\n      {\n        variant: 'glass-premium',\n        effect: 'glow',\n        className: 'focus:shadow-blue-glow focus:border-blue-400/50'\n      },\n      {\n        variant: 'glass-frost',\n        effect: 'purple-glow',\n        className: 'focus:shadow-purple-glow focus:border-purple-400/50'\n      },\n      {\n        variant: 'glass-dark',\n        effect: 'glow',\n        className: 'focus:shadow-[0_0_20px_rgba(255,255,255,0.2)]'\n      },\n      \n      // Error states with appropriate focus colors\n      {\n        state: 'error',\n        effect: 'glow',\n        className: 'focus:shadow-[0_0_15px_rgba(239,68,68,0.5)]'\n      },\n      {\n        state: 'success',\n        effect: 'glow',\n        className: 'focus:shadow-[0_0_15px_rgba(34,197,94,0.5)]'\n      },\n      \n      // Specific variants for material design\n      {\n        variant: 'material',\n        state: 'focused',\n        className: 'border-b-primary-base'\n      },\n      \n      // Neumorphic with state combos\n      {\n        variant: ['neumorphic-light', 'neumorphic-dark'],\n        state: 'error',\n        className: 'shadow-[inset_0_0_5px_rgba(239,68,68,0.5)]'\n      },\n      {\n        variant: ['neumorphic-light', 'neumorphic-dark'],\n        state: 'success',\n        className: 'shadow-[inset_0_0_5px_rgba(34,197,94,0.5)]'\n      },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      padding: 'md',\n      rounded: 'md',\n      effect: 'none',\n      state: 'default',\n      size: 'md',\n    },\n  }\n);\n\n// Helper text variants for different states\nconst helperTextVariants = cva(\n  'mt-1.5 text-sm transition-all',\n  {\n    variants: {\n      state: {\n        default: 'text-foreground-tertiary',\n        error: 'text-red-500',\n        success: 'text-green-500',\n      },\n    },\n    defaultVariants: {\n      state: 'default',\n    },\n  }\n);\n\n// Extract variant props from CVA functions\ntype InputWrapperVariantProps = VariantProps<typeof inputWrapperVariants>;\ntype LabelVariantProps = VariantProps<typeof labelVariants>;\ntype InputVariantProps = VariantProps<typeof inputVariants>;\ntype HelperTextVariantProps = VariantProps<typeof helperTextVariants>;\n\n// Define all possible input types for better intellisense\ntype InputType = \n  | 'text'\n  | 'password'\n  | 'email'\n  | 'number'\n  | 'tel'\n  | 'url'\n  | 'search'\n  | 'date'\n  | 'time'\n  | 'datetime-local'\n  | 'month'\n  | 'week'\n  | 'color';\n\n// Base props interface that extends HTML input props\ninterface BaseInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  // Appearance props from variants\n  variant?: InputVariantProps['variant'];\n  padding?: InputVariantProps['padding'];\n  rounded?: InputVariantProps['rounded'];\n  effect?: InputVariantProps['effect'];\n  size?: InputVariantProps['size'];\n  \n  // Input functionality props\n  type?: InputType;\n  error?: string;\n  success?: string;\n  label?: string;\n  helperText?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  prefix?: string;\n  suffix?: string;\n  fullWidth?: InputWrapperVariantProps['fullWidth'];\n  floatingLabel?: boolean;\n  clearable?: boolean;\n  showPasswordToggle?: boolean;\n  \n  // Class names for styling\n  className?: string;\n  wrapperClassName?: string;\n  labelClassName?: string;\n  helperTextClassName?: string;\n  \n  // Animation related props\n  animated?: boolean;\n}\n\n// Exported interface for documentation and external usage\nexport interface InputProps extends BaseInputProps {}\n\n// Type definition for the forwarded ref\nexport type InputRef = HTMLInputElement;\n\n// Enhanced Input Component with performance optimizations\nconst Input = memo(forwardRef<InputRef, InputProps>(({\n  // Input appearance props\n  variant,\n  padding,\n  rounded,\n  effect,\n  size,\n  className = '',\n  wrapperClassName = '',\n  labelClassName = '',\n  helperTextClassName = '',\n  \n  // Input functionality props\n  type = 'text',\n  error,\n  success,\n  label,\n  helperText,\n  leftIcon,\n  rightIcon,\n  prefix,\n  suffix,\n  fullWidth = true,\n  floatingLabel = false,\n  clearable = false,\n  showPasswordToggle = true,\n  \n  // Animation related props\n  animated = true,\n  \n  // Event handlers with performance optimizations\n  onChange,\n  onFocus,\n  onBlur,\n  \n  // Other props\n  ...props\n}, ref) => {\n  // Use internal ref if none provided\n  const inputRef = useRef<HTMLInputElement>(null);\n  const combinedRef = (ref || inputRef) as React.RefObject<HTMLInputElement>;\n  \n  // Component state\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [isFocused, setIsFocused] = useState<boolean>(false);\n  const [hasValue, setHasValue] = useState<boolean>(!!props.value || !!props.defaultValue);\n  const { theme, themeObject } = useTheme() as ThemeState;\n  \n  // Apply theme-specific styles\n  let effectiveVariant = variant;\n  let effectiveRounded = rounded;\n  let effectiveEffect = effect;\n  let effectiveSize = size;\n  \n  // Adjust styles based on active theme\n  if (theme === 'techDark' && !variant) {\n    // Default for tech dark theme\n    effectiveVariant = 'filled';\n    if (!rounded) effectiveRounded = 'md';\n    if (!effect) effectiveEffect = 'none';\n  } \n  else if (theme === 'glass' && !variant) {\n    // Default for glass theme\n    effectiveVariant = 'glass-premium';\n    if (!rounded) effectiveRounded = 'lg';\n    if (!effect) effectiveEffect = 'glow';\n  }\n  \n  // Determine input type (handle password visibility)\n  const inputType = type === 'password' && showPassword ? 'text' : type;\n  \n  // Determine input state for styling\n  const inputState: InputVariantProps['state'] = error \n    ? 'error' \n    : success \n    ? 'success' \n    : isFocused \n    ? 'focused' \n    : 'default';\n  \n  // Handle floating label animation\n  const labelState: LabelVariantProps['state'] = inputState;\n  const labelEffect: LabelVariantProps['effect'] = floatingLabel ? 'float' : 'none';\n  const floatingLabelClass = floatingLabel \n    ? `${hasValue || isFocused ? 'text-xs transform -translate-y-7' : 'text-base transform translate-y-2'} pointer-events-none absolute left-3 transition-all duration-200` \n    : '';\n  \n  // Padding adjustments for icons or affixes\n  const paddingLeftClass = leftIcon || prefix ? 'pl-10' : '';\n  const paddingRightClass = type === 'password' || rightIcon || suffix || (clearable && hasValue) ? 'pr-10' : '';\n  \n  // Optimized input classes\n  const inputClasses = inputVariants({\n    variant: effectiveVariant,\n    padding,\n    rounded: effectiveRounded,\n    effect: effectiveEffect,\n    state: inputState,\n    size: effectiveSize,\n    className: `${paddingLeftClass} ${paddingRightClass} ${className}`,\n  });\n  \n  // Wrapper classes\n  const wrapperClasses = inputWrapperVariants({\n    fullWidth,\n    className: wrapperClassName,\n  });\n  \n  // Label classes\n  const labelClasses = labelVariants({\n    state: labelState, \n    effect: labelEffect,\n    variant: effectiveVariant,\n    className: `${floatingLabelClass} ${labelClassName}`,\n  });\n  \n  // Helper text classes\n  const helperTextClasses = helperTextVariants({\n    state: error ? 'error' : success ? 'success' : 'default',\n    className: helperTextClassName,\n  });\n  \n  // Toggle password visibility\n  const togglePasswordVisibility = (): void => {\n    setShowPassword(prev => !prev);\n  };\n  \n  // Track input value for floating label and clearable functionality\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setHasValue(!!e.target.value);\n    if (onChange) onChange(e);\n  };\n  \n  // Handle focus with custom handler\n  const handleFocus = (e: FocusEvent<HTMLInputElement>): void => {\n    setIsFocused(true);\n    if (onFocus) onFocus(e);\n  };\n  \n  // Handle blur with custom handler\n  const handleBlur = (e: FocusEvent<HTMLInputElement>): void => {\n    setIsFocused(false);\n    if (onBlur) onBlur(e);\n  };\n  \n  // Handle input clearing\n  const handleClear = (): void => {\n    // Reset input value\n    if (combinedRef.current) {\n      combinedRef.current.value = '';\n      \n      // Trigger synthetic change event\n      const event = new Event('change', { bubbles: true });\n      combinedRef.current.dispatchEvent(event);\n      \n      // Set focus back to input\n      combinedRef.current.focus();\n      \n      // Update state\n      setHasValue(false);\n      \n      // Call onChange if provided\n      if (onChange) {\n        const syntheticEvent = { target: combinedRef.current } as ChangeEvent<HTMLInputElement>;\n        onChange(syntheticEvent);\n      }\n    }\n  };\n  \n  // Update hasValue when value changes externally\n  useEffect(() => {\n    setHasValue(!!props.value);\n  }, [props.value]);\n  \n  // Check if we need to show validation icons\n  const showSuccessIcon = success && !rightIcon && !suffix && type !== 'password';\n  const showErrorIcon = error && !rightIcon && !suffix && type !== 'password';\n  \n  return (\n    <div className={wrapperClasses}>\n      {/* Non-floating label */}\n      {label && !floatingLabel && (\n        <label \n          htmlFor={props.id} \n          className={labelClasses}\n        >\n          {label}\n        </label>\n      )}\n      \n      {/* Input container */}\n      <div className=\"relative\">\n        {/* Floating label */}\n        {label && floatingLabel && (\n          <label \n            htmlFor={props.id} \n            className={labelClasses}\n          >\n            {label}\n          </label>\n        )}\n        \n        {/* Left icon or prefix */}\n        {leftIcon && (\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-foreground-tertiary\">\n            {leftIcon}\n          </div>\n        )}\n        \n        {prefix && (\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-foreground-tertiary\">\n            <span className=\"text-sm\">{prefix}</span>\n          </div>\n        )}\n        \n        {/* Input element */}\n        <input\n          ref={combinedRef}\n          type={inputType}\n          className={inputClasses}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          {...props}\n        />\n        \n        {/* Right icon, suffix, password toggle, or clear button */}\n        <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center gap-2\">\n          {/* Success icon */}\n          {showSuccessIcon && (\n            <Check className=\"h-4 w-4 text-green-500\" />\n          )}\n          \n          {/* Error icon */}\n          {showErrorIcon && (\n            <div className=\"text-red-500\">!</div>\n          )}\n          \n          {/* Clear button */}\n          {clearable && hasValue && !showSuccessIcon && !showErrorIcon && (\n            <button\n              type=\"button\"\n              onClick={handleClear}\n              className=\"text-foreground-tertiary hover:text-foreground-secondary transition-colors\"\n              tabIndex={-1}\n            >\n              <X size={16} />\n            </button>\n          )}\n          \n          {/* Password toggle */}\n          {type === 'password' && showPasswordToggle && (\n            <button\n              type=\"button\"\n              onClick={togglePasswordVisibility}\n              className=\"text-foreground-tertiary hover:text-foreground-secondary transition-colors\"\n              tabIndex={-1}\n              aria-label={showPassword ? 'Hide password' : 'Show password'}\n            >\n              {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n            </button>\n          )}\n          \n          {/* Right icon */}\n          {type !== 'password' && rightIcon && (\n            <span className=\"pointer-events-none text-foreground-tertiary\">\n              {rightIcon}\n            </span>\n          )}\n          \n          {/* Suffix */}\n          {type !== 'password' && suffix && !rightIcon && (\n            <span className=\"pointer-events-none text-foreground-tertiary text-sm\">\n              {suffix}\n            </span>\n          )}\n        </div>\n      </div>\n      \n      {/* Helper text, error or success message */}\n      {(error || success || helperText) && (\n        <p className={helperTextClasses}>\n          {error || success || helperText}\n        </p>\n      )}\n    </div>\n  );\n}));\n\n// Add JSDoc comments for better intellisense\n/**\n * Input component with extensive styling options and features.\n * \n * @example\n * // Basic usage\n * <Input label=\"Email\" placeholder=\"Enter your email\" />\n * \n * @example\n * // Password input with toggle\n * <Input \n *   type=\"password\" \n *   label=\"Password\" \n *   placeholder=\"Enter your password\"\n *   showPasswordToggle\n * />\n * \n * @example\n * // Styled input with effects\n * <Input \n *   variant=\"glass-premium\"\n *   effect=\"glow\"\n *   rounded=\"lg\"\n *   label=\"Username\"\n *   placeholder=\"Choose a username\"\n * />\n */\n// Display name for dev tools\nInput.displayName = 'Input';\n\nexport default Input;"],"names":["inputWrapperVariants","cva","labelVariants","inputVariants","helperTextVariants","Input","memo","forwardRef","variant","padding","rounded","effect","size","className","wrapperClassName","labelClassName","helperTextClassName","type","error","success","label","helperText","leftIcon","rightIcon","prefix","suffix","fullWidth","floatingLabel","clearable","showPasswordToggle","animated","onChange","onFocus","onBlur","props","ref","inputRef","useRef","combinedRef","showPassword","setShowPassword","useState","isFocused","setIsFocused","hasValue","setHasValue","theme","themeObject","useTheme","effectiveVariant","effectiveRounded","effectiveEffect","effectiveSize","inputType","inputState","labelState","labelEffect","floatingLabelClass","inputClasses","wrapperClasses","labelClasses","helperTextClasses","togglePasswordVisibility","prev","handleChange","e","handleFocus","handleBlur","handleClear","event","syntheticEvent","useEffect","showSuccessIcon","showErrorIcon","jsxs","jsx","Check","X","EyeOff","Eye"],"mappings":"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"}