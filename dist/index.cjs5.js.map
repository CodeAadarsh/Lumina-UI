{"version":3,"file":"index.cjs5.js","sources":["../src/components/ui/ThemeToggle.tsx"],"sourcesContent":["import React from 'react';\nimport { useTheme } from '../../providers/ThemeProvider';\nimport { Sun, Moon, Palette, LucideIcon } from 'lucide-react';\nimport { ThemeName } from '../../providers/ThemeProvider';\n\n// Style variants for different themes\nconst themeIconMap: Record<ThemeName, LucideIcon> = {\n  enterprise: Sun,\n  techDark: Moon,\n  glass: Palette,\n  default: Sun, // Fallback for 'default' theme\n};\n\nexport interface ThemeToggleProps {\n  /** Additional CSS class name */\n  className?: string;\n  /** Whether to show the theme name label next to the icon */\n  showLabel?: boolean;\n  /** Size of the toggle button */\n  size?: 'sm' | 'md' | 'lg';\n}\n\n/**\n * ThemeToggle component to switch between themes\n */\nconst ThemeToggle: React.FC<ThemeToggleProps> = ({\n  className = '',\n  showLabel = false,\n  size = 'md',\n}) => {\n  const { theme, setTheme } = useTheme();\n  \n  // Size variants\n  const sizeVariants: Record<string, string> = {\n    sm: 'h-8 w-8 p-1.5',\n    md: 'h-10 w-10 p-2',\n    lg: 'h-12 w-12 p-2.5',\n  };\n  \n  // Get current theme's icon\n  const ThemeIcon = themeIconMap[theme] || Sun;\n  \n  // Get next theme in the rotation\n  const getNextTheme = (): ThemeName => {\n    const themes: ThemeName[] = ['enterprise', 'techDark', 'glass'];\n    const currentIndex = themes.indexOf(theme as ThemeName);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    return themes[nextIndex];\n  };\n  \n  // Handle theme toggle click\n  const handleToggle = (): void => {\n    setTheme(getNextTheme());\n  };\n  \n  // Theme specific styles\n  const getThemeSpecificStyles = (): string => {\n    switch(theme) {\n      case 'techDark':\n        return 'bg-background-secondary border border-border-strong text-foreground-primary hover:bg-background-tertiary shadow-blue-glow';\n      case 'glass':\n        return 'glass-effect backdrop-blur-sm border border-white/10 text-foreground-primary hover:bg-white/10 shadow-white-glow';\n      default: // enterprise\n        return 'bg-background-secondary border border-border text-foreground-primary hover:bg-background-tertiary';\n    }\n  };\n  \n  return (\n    <div className=\"flex items-center\">\n      <button\n        onClick={handleToggle}\n        className={`rounded-full transition-all ${sizeVariants[size]} ${getThemeSpecificStyles()} ${className}`}\n        title={`Toggle theme (current: ${theme})`}\n      >\n        <ThemeIcon className=\"w-full h-full\" />\n      </button>\n      \n      {showLabel && (\n        <span className=\"ml-2 text-foreground-secondary text-sm\">\n          {theme.charAt(0).toUpperCase() + theme.slice(1)} Theme\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default ThemeToggle;"],"names":["themeIconMap","Sun","Moon","Palette","ThemeToggle","className","showLabel","size","theme","setTheme","useTheme","sizeVariants","ThemeIcon","getNextTheme","themes","nextIndex","handleToggle","getThemeSpecificStyles","jsxs","jsx"],"mappings":"yGAMMA,EAA8C,CAClD,WAAYC,EAAA,IACZ,SAAUC,EAAA,KACV,MAAOC,EAAA,QACP,QAASF,EAAAA,GACX,EAcMG,EAA0C,CAAC,CAC/C,UAAAC,EAAY,GACZ,UAAAC,EAAY,GACZ,KAAAC,EAAO,IACT,IAAM,CACJ,KAAM,CAAE,MAAAC,EAAO,SAAAC,CAAS,EAAIC,WAAS,EAG/BC,EAAuC,CAC3C,GAAI,gBACJ,GAAI,gBACJ,GAAI,iBACN,EAGMC,EAAYZ,EAAaQ,CAAK,GAAKP,EAAA,IAGnCY,EAAe,IAAiB,CACpC,MAAMC,EAAsB,CAAC,aAAc,WAAY,OAAO,EAExDC,GADeD,EAAO,QAAQN,CAAkB,EACpB,GAAKM,EAAO,OAC9C,OAAOA,EAAOC,CAAS,CACzB,EAGMC,EAAe,IAAY,CAC/BP,EAASI,GAAc,CACzB,EAGMI,EAAyB,IAAc,CAC3C,OAAOT,EAAO,CACZ,IAAK,WACI,MAAA,4HACT,IAAK,QACI,MAAA,mHACT,QACS,MAAA,mGAAA,CAEb,EAGE,OAAAU,EAAA,kBAAA,KAAC,MAAI,CAAA,UAAU,oBACb,SAAA,CAAAC,EAAA,kBAAA,IAAC,SAAA,CACC,QAASH,EACT,UAAW,+BAA+BL,EAAaJ,CAAI,CAAC,IAAIU,EAAwB,CAAA,IAAIZ,CAAS,GACrG,MAAO,0BAA0BG,CAAK,IAEtC,SAAAW,EAAAA,kBAAAA,IAACP,EAAU,CAAA,UAAU,eAAgB,CAAA,CAAA,CACvC,EAECN,GACCY,EAAA,kBAAA,KAAC,OAAK,CAAA,UAAU,yCACb,SAAA,CAAAV,EAAM,OAAO,CAAC,EAAE,cAAgBA,EAAM,MAAM,CAAC,EAAE,QAAA,CAClD,CAAA,CAAA,EAEJ,CAEJ"}