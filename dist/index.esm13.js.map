{"version":3,"file":"index.esm13.js","sources":["../src/components/ui/AnimatedTestimonialSlider.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { useSafeTheme } from '../../hooks/useSafeTheme';\nimport { cn } from '../../utils/cn';\n\n// Define theme types\nexport type TestimonialTheme = 'enterprise' | 'techDark' | 'glass' | 'neumorphicLight' | 'glow' | '3d';\nexport type TestimonialPosition = 'front' | 'middle' | 'back' | 'hidden';\n\n// Define the testimonial item type\nexport interface TestimonialItem {\n  name: string;\n  title?: string;\n  quote: string;\n  image?: string;\n}\n\n// Define the variants with class-variance-authority\nconst testimonialSliderVariants = cva(\n  // Base styles for all Testimonial components\n  \"relative w-full max-w-screen-xl mx-auto flex flex-col md:flex-row items-center md:items-start justify-between gap-12 px-4 py-12\",\n  {\n    variants: {\n      // Theme variants\n      theme: {\n        enterprise: \"text-gray-800\",\n        techDark: \"text-white\",\n        glass: \"text-white\",\n        neumorphicLight: \"text-gray-700\",\n        glow: \"text-white\",\n        '3d': \"text-gray-900 dark:text-white\",\n      },\n    },\n    defaultVariants: {\n      theme: 'techDark',\n    },\n  }\n);\n\n// Content container variants\nconst contentContainerVariants = cva(\n  \"w-full md:w-3/5 flex flex-col justify-center md:pr-8\",\n  {\n    variants: {\n      theme: {\n        enterprise: \"text-gray-800\",\n        techDark: \"text-white\",\n        glass: \"text-white\",\n        neumorphicLight: \"text-gray-700\",\n        glow: \"text-white\",\n        '3d': \"text-gray-900 dark:text-white\",\n      },\n    },\n    defaultVariants: {\n      theme: 'techDark',\n    },\n  }\n);\n\n// Image stack container variants\nconst imageStackContainerVariants = cva(\n  \"relative w-full md:w-2/5 flex items-center justify-center py-8\",\n  {\n    variants: {\n      theme: {\n        enterprise: \"\",\n        techDark: \"\",\n        glass: \"\",\n        neumorphicLight: \"\",\n        glow: \"\",\n        '3d': \"\",\n      },\n    },\n    defaultVariants: {\n      theme: 'techDark',\n    },\n  }\n);\n\n// Testimonial image card variants\nconst testimonialImageCardVariants = cva(\n  \"absolute overflow-hidden transition-all duration-900 ease-out transform-gpu rounded-3xl shadow-lg\",\n  {\n    variants: {\n      // Theme variants\n      theme: {\n        enterprise: \"bg-white border border-gray-200 shadow-xl\",\n        techDark: \"bg-gray-900 border border-gray-800 shadow-2xl\",\n        glass: \"glass-effect border border-white/30 shadow-xl backdrop-blur-lg\",\n        neumorphicLight: \"bg-[#e0e5ec] shadow-[20px_20px_60px_#bebebe,-20px_-20px_60px_#ffffff] border-none\",\n        glow: \"bg-gray-900/90 border border-blue-500/30 shadow-2xl shadow-[0_0_15px_rgba(59,130,246,0.5),0_0_30px_rgba(59,130,246,0.3)]\",\n        '3d': \"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-xl\",\n      },\n      // Card position variants\n      position: {\n        front: \"z-30 rotate-0 translate-y-0 translate-x-0 scale-100 opacity-100\",\n        middle: \"z-20 rotate-[-8deg] translate-y-[8%] translate-x-[-8%] scale-[0.9] opacity-75\",\n        back: \"z-10 rotate-[-16deg] translate-y-[16%] translate-x-[-16%] scale-[0.8] opacity-50\",\n        hidden: \"opacity-0 translate-x-[60%] scale-[0.7] z-0\",\n      },\n    },\n    compoundVariants: [\n      // Special styling for front card in each theme\n      {\n        theme: \"enterprise\",\n        position: \"front\",\n        className: \"shadow-2xl\", \n      },\n      {\n        theme: \"techDark\",\n        position: \"front\",\n        className: \"shadow-purple-glow\", \n      },\n      {\n        theme: \"glass\",\n        position: \"front\",\n        className: \"shadow-white-glow border-white/50\", \n      },\n      {\n        theme: \"neumorphicLight\",\n        position: \"front\",\n        className: \"shadow-[30px_30px_80px_#bebebe,-30px_-30px_80px_#ffffff]\", \n      },\n      {\n        theme: \"glow\",\n        position: \"front\",\n        className: \"animate-glow border-blue-500/50\", \n      },\n      {\n        theme: \"3d\",\n        position: \"front\",\n        className: \"shadow-2xl\", \n      },\n    ],\n    defaultVariants: {\n      theme: 'techDark',\n      position: 'front',\n    },\n  }\n);\n\n// Quote container variants\nconst quoteContainerVariants = cva(\n  \"mb-8 p-6 rounded-lg\",\n  {\n    variants: {\n      theme: {\n        enterprise: \"bg-white/5 border border-gray-200/20\",\n        techDark: \"bg-gray-800/30 border border-gray-700/30\",\n        glass: \"bg-white/10 backdrop-blur-sm border border-white/10\",\n        neumorphicLight: \"bg-[#e0e5ec] shadow-[inset_3px_3px_6px_#b8b9be,inset_-3px_-3px_6px_#ffffff]\",\n        glow: \"bg-gray-800/40 border border-blue-500/20\",\n        '3d': \"bg-white/10 dark:bg-gray-800/40 border border-gray-200/20 dark:border-gray-700/30\",\n      },\n    },\n    defaultVariants: {\n      theme: 'techDark',\n    },\n  }\n);\n\n// Navigation button variants\nconst navButtonVariants = cva(\n  \"flex items-center justify-center w-10 h-10 rounded-full focus:outline-none transition-all duration-300\",\n  {\n    variants: {\n      // Theme variants\n      theme: {\n        enterprise: \"bg-white text-gray-800 border border-gray-200 shadow-md hover:shadow-lg hover:bg-gray-50\",\n        techDark: \"bg-gray-800 text-white border border-gray-700 hover:bg-gray-700\",\n        glass: \"bg-white/20 backdrop-blur-md text-white border border-white/30 hover:bg-white/30\",\n        neumorphicLight: \"bg-[#e0e5ec] text-gray-700 shadow-[3px_3px_6px_#b8b9be,-3px_-3px_6px_#ffffff] hover:shadow-[inset_3px_3px_6px_#b8b9be,inset_-3px_-3px_6px_#ffffff]\",\n        glow: \"bg-gray-900 text-white border border-blue-500/30 shadow-[0_0_10px_rgba(59,130,246,0.3)] hover:shadow-[0_0_15px_rgba(59,130,246,0.5)]\",\n        '3d': \"bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700 shadow-md hover:shadow-lg\",\n      },\n    },\n    defaultVariants: {\n      theme: 'techDark',\n    },\n  }\n);\n\n// Create VariantProps interfaces\nexport type TestimonialSliderVariantsProps = VariantProps<typeof testimonialSliderVariants>;\nexport type TestimonialImageCardVariantsProps = VariantProps<typeof testimonialImageCardVariants>;\n\n// Define component props, extending the variant props\nexport interface AnimatedTestimonialSliderProps extends \n  React.HTMLAttributes<HTMLDivElement>,\n  TestimonialSliderVariantsProps {\n  testimonials: TestimonialItem[];\n  autoplay?: boolean;\n  autoplaySpeed?: number;\n}\n\nexport const AnimatedTestimonialSlider: React.FC<AnimatedTestimonialSliderProps> = ({\n  testimonials,\n  className,\n  theme: themeProp,\n  autoplay = true,\n  autoplaySpeed = 5000,\n  ...props\n}) => {\n  // Get the current theme from context\n  const { theme: contextTheme } = useSafeTheme();\n  \n  // Use prop theme or fall back to context\n  const activeTheme = themeProp || contextTheme || 'techDark';\n  \n  // State for current testimonial\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [animating, setAnimating] = useState<boolean>(false);\n  const autoplayTimerRef = useRef<ReturnType<typeof setInterval> | null>(null);\n  \n  // Function to go to next testimonial\n  const nextTestimonial = (): void => {\n    if (animating) return;\n    \n    setAnimating(true);\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);\n    \n    setTimeout(() => {\n      setAnimating(false);\n    }, 900); // Match this with animation duration\n  };\n  \n  // Function to go to previous testimonial\n  const prevTestimonial = (): void => {\n    if (animating) return;\n    \n    setAnimating(true);\n    setCurrentIndex((prevIndex) => (prevIndex - 1 + testimonials.length) % testimonials.length);\n    \n    setTimeout(() => {\n      setAnimating(false);\n    }, 900); // Match this with animation duration\n  };\n  \n  // Setup autoplay\n  useEffect(() => {\n    if (autoplay) {\n      autoplayTimerRef.current = setInterval(() => {\n        nextTestimonial();\n      }, autoplaySpeed);\n    }\n    \n    return () => {\n      if (autoplayTimerRef.current) {\n        clearInterval(autoplayTimerRef.current);\n      }\n    };\n  }, [autoplay, autoplaySpeed, currentIndex, animating]);\n  \n  // Reset autoplay timer when manually changing slides\n  const resetAutoplayTimer = (): void => {\n    if (autoplay && autoplayTimerRef.current) {\n      clearInterval(autoplayTimerRef.current);\n      autoplayTimerRef.current = setInterval(() => {\n        nextTestimonial();\n      }, autoplaySpeed);\n    }\n  };\n  \n  // Determine card position for each testimonial\n  const getCardPosition = (index: number): TestimonialPosition => {\n    const totalCount = testimonials.length;\n    \n    if (index === currentIndex) return 'front';\n    if (index === (currentIndex + 1) % totalCount) return 'middle';\n    if (index === (currentIndex + 2) % totalCount) return 'back';\n    return 'hidden';\n  };\n  \n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent): void => {\n      if (e.key === 'ArrowLeft') {\n        prevTestimonial();\n        resetAutoplayTimer();\n      } else if (e.key === 'ArrowRight') {\n        nextTestimonial();\n        resetAutoplayTimer();\n      }\n    };\n    \n    window.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [currentIndex, animating]);\n  \n  // Get container classes\n  const containerClasses = testimonialSliderVariants({\n    theme: activeTheme as TestimonialTheme,\n    className,\n  });\n  \n  // Get content container classes\n  const contentClasses = contentContainerVariants({\n    theme: activeTheme as TestimonialTheme,\n  });\n  \n  // Get image stack container classes\n  const imageStackClasses = imageStackContainerVariants({\n    theme: activeTheme as TestimonialTheme,\n  });\n  \n  // Get quote container classes\n  const quoteClasses = quoteContainerVariants({\n    theme: activeTheme as TestimonialTheme,\n  });\n  \n  // Get navigation button classes\n  const prevButtonClasses = navButtonVariants({\n    theme: activeTheme as TestimonialTheme,\n  });\n  \n  const nextButtonClasses = navButtonVariants({\n    theme: activeTheme as TestimonialTheme,\n  });\n  \n  // Current testimonial\n  const currentTestimonial = testimonials[currentIndex];\n  \n  return (\n    <div className={containerClasses} {...props}>\n      {/* Left side - Content and Navigation */}\n      <div className={contentClasses}>\n        {/* Testimonial Content */}\n        <div>\n          <h2 className=\"text-4xl font-bold mb-2\">{currentTestimonial.name}</h2>\n          <p className=\"text-xl opacity-80 mb-6\">{currentTestimonial.title}</p>\n          \n          <div className={quoteClasses}>\n            <p className=\"text-2xl leading-relaxed\">\n              {currentTestimonial.quote}\n            </p>\n          </div>\n        </div>\n        \n        {/* Navigation */}\n        <div className=\"flex space-x-4\">\n          <button \n            className={prevButtonClasses} \n            onClick={() => {\n              prevTestimonial();\n              resetAutoplayTimer();\n            }}\n            aria-label=\"Previous testimonial\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M15 18l-6-6 6-6\" />\n            </svg>\n          </button>\n          \n          <button \n            className={nextButtonClasses}\n            onClick={() => {\n              nextTestimonial();\n              resetAutoplayTimer();\n            }}\n            aria-label=\"Next testimonial\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <path d=\"M9 18l6-6-6-6\" />\n            </svg>\n          </button>\n        </div>\n      </div>\n      \n      {/* Right side - Stacked Image Cards */}\n      <div className={imageStackClasses}>\n        <div className=\"relative w-full max-w-[350px] aspect-square\">\n          {testimonials.map((testimonial, index) => {\n            const position = getCardPosition(index);\n            \n            // Get image card classes\n            const imageCardClasses = testimonialImageCardVariants({\n              theme: activeTheme as TestimonialTheme,\n              position,\n            });\n            \n            // Don't render hidden cards for performance\n            if (position === 'hidden') return null;\n            \n            return (\n              <div\n                key={index}\n                className={cn(imageCardClasses)}\n                style={{\n                  width: '100%',\n                  height: '100%',\n                  transition: 'all 0.9s cubic-bezier(0.16, 1, 0.3, 1)',\n                  transformOrigin: 'bottom left',\n                }}\n              >\n                {/* Person Image */}\n                {testimonial.image && (\n                  <img\n                    src={testimonial.image}\n                    alt={testimonial.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { testimonialSliderVariants };"],"names":["testimonialSliderVariants","cva","contentContainerVariants","imageStackContainerVariants","testimonialImageCardVariants","quoteContainerVariants","navButtonVariants","AnimatedTestimonialSlider","testimonials","className","themeProp","autoplay","autoplaySpeed","props","contextTheme","useSafeTheme","activeTheme","currentIndex","setCurrentIndex","useState","animating","setAnimating","autoplayTimerRef","useRef","nextTestimonial","prevIndex","prevTestimonial","useEffect","resetAutoplayTimer","getCardPosition","index","totalCount","handleKeyDown","e","containerClasses","contentClasses","imageStackClasses","quoteClasses","prevButtonClasses","nextButtonClasses","currentTestimonial","jsxs","jsx","testimonial","position","imageCardClasses","cn"],"mappings":"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"}