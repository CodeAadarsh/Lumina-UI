{"version":3,"file":"index.cjs15.js","sources":["../src/components/ui/HoverCard3D.tsx"],"sourcesContent":["import React, { forwardRef, useState, useRef, useEffect, memo, CSSProperties, MouseEvent } from 'react';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { ThemeProvider, useTheme } from '../../providers/ThemeProvider';\nimport { cn } from '../../utils/cn';\nimport { ThemeName } from '../../providers/ThemeProvider';\n\n// Theme types\nexport type HoverCardTheme = 'enterprise' | 'techDark' | 'glass';\nexport type HoverCardSize = 'sm' | 'md' | 'lg';\nexport type HoverCardIntensity = 'subtle' | 'medium' | 'strong';\nexport type HoverCardEffect = 'glow' | 'shimmer' | 'lift' | 'none';\n\n// Define the variants with class-variance-authority\nconst hoverCard3DVariants = cva(\n  // Base styles for all HoverCard3D components\n  \"relative overflow-hidden transition-all duration-300 perspective-1000 transform-gpu\",\n  {\n    variants: {\n      // Theme variants\n      theme: {\n        enterprise: \"bg-background-primary border border-border shadow-md rounded-lg\",\n        techDark: \"bg-background-primary border border-transparent gradient-border-1 shadow-lg rounded-xl\",\n        glass: \"glass-effect border border-border backdrop-blur-md rounded-xl\",\n      } as const,\n      // Size variants\n      size: {\n        sm: \"p-4 max-w-sm\",\n        md: \"p-6 max-w-md\",\n        lg: \"p-8 max-w-lg\",\n      } as const,\n      // Intensity of the 3D effect\n      intensity: {\n        subtle: \"\", // CSS variables will control the intensity\n        medium: \"\",\n        strong: \"\",\n      } as const,\n      // Additional hover effects\n      hoverEffect: {\n        glow: \"\",\n        shimmer: \"overflow-hidden\",\n        lift: \"\",\n        none: \"\",\n      } as const,\n    },\n    // Compound variants for specific combinations\n    compoundVariants: [\n      // Enterprise theme specifics\n      {\n        theme: \"enterprise\",\n        hoverEffect: \"glow\",\n        className: \"hover:shadow-lg transition-shadow\",\n      },\n      // Tech Dark theme specifics\n      {\n        theme: \"techDark\",\n        hoverEffect: \"glow\",\n        className: \"hover:shadow-blue-glow transition-all\",\n      },\n      {\n        theme: \"techDark\",\n        hoverEffect: \"shimmer\",\n        className: \"before:absolute before:inset-0 before:bg-gradient-to-r before:from-transparent before:via-white/10 before:to-transparent before:translate-x-[-100%] hover:before:animate-shimmer\",\n      },\n      // Glass theme specifics\n      {\n        theme: \"glass\",\n        hoverEffect: \"glow\",\n        className: \"hover:shadow-white-glow transition-all border-opacity-30\",\n      },\n    ],\n    // Default variant values\n    defaultVariants: {\n      theme: \"enterprise\",\n      size: \"md\",\n      intensity: \"medium\",\n      hoverEffect: \"none\",\n    },\n  }\n);\n\n// Extract variant props type from hoverCard3DVariants\nexport type HoverCard3DVariantProps = VariantProps<typeof hoverCard3DVariants>;\n\n// Interface for safety theme hook result\ninterface SafeThemeResult {\n  theme: ThemeName;\n  [key: string]: any;\n}\n\n// Safe version of useTheme that provides a default if not in context\nconst useSafeTheme = (): SafeThemeResult => {\n  try {\n    // Try to use the theme context\n    return useTheme();\n  } catch (error) {\n    // If context is not available, return a default theme object\n    console.warn('ThemeProvider not found, using default theme');\n    return { theme: 'enterprise' };\n  }\n};\n\n// Type definitions for intensity values\ninterface IntensityValues {\n  maxRotation: number;\n  perspective: number;\n}\n\n// Interface for glare styling\ninterface GlareStyle extends CSSProperties {\n  position: 'absolute';\n  top: 0;\n  left: 0;\n  width: '100%';\n  height: '100%';\n  pointerEvents: 'none';\n  background: string;\n  transform: string;\n  opacity: number;\n  transition: string;\n}\n\n// HoverCard3D Props interface\nexport interface HoverCard3DProps extends React.HTMLAttributes<HTMLDivElement>, \n  Omit<HoverCard3DVariantProps, 'theme'> {\n  /** Theme to use for the card */\n  theme?: HoverCardTheme;\n  /** Size variant of the card */\n  size?: HoverCardSize;\n  /** Intensity of the 3D effect */\n  intensity?: HoverCardIntensity;\n  /** Additional hover effect for the card */\n  hoverEffect?: HoverCardEffect;\n  /** Whether to enable the glare effect */\n  glareEnabled?: boolean;\n  /** Whether to reverse the rotation direction */\n  rotateReverse?: boolean;\n  /** Opacity of the glare effect (0-1) */\n  glareOpacity?: number;\n  /** Color of the glare (RGB format) */\n  glareColor?: string;\n  /** Maximum rotation in degrees */\n  maxRotation?: number;\n  /** Perspective value in pixels */\n  perspective?: number;\n  /** React children */\n  children: React.ReactNode;\n  /** Additional class names */\n  className?: string;\n}\n\n// HoverCard3D Component with React.memo for optimization\nconst HoverCard3D = memo(forwardRef<HTMLDivElement, HoverCard3DProps>(({\n  children,\n  className,\n  theme: themeProp,\n  size,\n  intensity,\n  hoverEffect,\n  glareEnabled = true,\n  rotateReverse = false,\n  glareOpacity = 0.1,\n  glareColor = \"255, 255, 255\",\n  maxRotation = 20, // Maximum rotation in degrees\n  perspective = 1000, // Perspective value\n  ...props\n}, ref) => {\n  // Get the current theme from context (safely)\n  const { theme: contextTheme } = useSafeTheme();\n  \n  // Use prop theme or fall back to context or default\n  const activeTheme = (themeProp || contextTheme || 'enterprise') as HoverCardTheme;\n  \n  // State for tracking mouse position\n  const [rotateX, setRotateX] = useState<number>(0);\n  const [rotateY, setRotateY] = useState<number>(0);\n  const [posX, setPosX] = useState<number>(50);\n  const [posY, setPosY] = useState<number>(50);\n  const [isHovering, setIsHovering] = useState<boolean>(false);\n  \n  // References\n  const cardRef = useRef<HTMLDivElement | null>(null);\n  const glareRef = useRef<HTMLDivElement | null>(null);\n  \n  // Set intensity values based on the intensity prop\n  const getIntensityValues = (): IntensityValues => {\n    switch (intensity) {\n      case 'subtle':\n        return { maxRotation: maxRotation * 0.5, perspective: perspective * 1.2 };\n      case 'medium':\n        return { maxRotation, perspective };\n      case 'strong':\n        return { maxRotation: maxRotation * 1.5, perspective: perspective * 0.8 };\n      default:\n        return { maxRotation, perspective };\n    }\n  };\n  \n  const { maxRotation: actualMaxRotation, perspective: actualPerspective } = getIntensityValues();\n  \n  // Handle mouse movement over the card\n  const handleMouseMove = (e: MouseEvent<HTMLDivElement>): void => {\n    if (!cardRef.current) return;\n    \n    const rect = cardRef.current.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    \n    // Calculate normalized position (-1 to 1)\n    const normalizedX = (e.clientX - centerX) / (rect.width / 2);\n    const normalizedY = (e.clientY - centerY) / (rect.height / 2);\n    \n    // Apply rotation (optionally reversed)\n    const directionMod = rotateReverse ? -1 : 1;\n    const rotX = normalizedY * actualMaxRotation * directionMod;\n    const rotY = normalizedX * -actualMaxRotation * directionMod;\n    \n    // Update state for rotation\n    setRotateX(rotX);\n    setRotateY(rotY);\n    \n    // Update glare position if enabled\n    if (glareEnabled && glareRef.current) {\n      const glareX = (normalizedX + 1) * 50; // Convert to percentage (0-100)\n      const glareY = (normalizedY + 1) * 50;\n      setPosX(glareX);\n      setPosY(glareY);\n    }\n  };\n  \n  // Handle mouse enter/leave\n  const handleMouseEnter = (): void => setIsHovering(true);\n  const handleMouseLeave = (): void => {\n    setIsHovering(false);\n    setRotateX(0);\n    setRotateY(0);\n  };\n  \n  // Generate styles for the card and glare\n  const cardStyle: CSSProperties = {\n    transform: isHovering ? `perspective(${actualPerspective}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)` : '',\n    transition: isHovering ? 'transform 0.1s ease' : 'transform 0.5s ease-out',\n  };\n  \n  const glareStyle: GlareStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    pointerEvents: 'none',\n    background: `radial-gradient(circle at ${posX}% ${posY}%, rgba(${glareColor}, ${glareOpacity}), transparent)`,\n    transform: `translateZ(1px)`,\n    opacity: isHovering ? 1 : 0,\n    transition: 'opacity 0.5s ease-out',\n  };\n  \n  // Get appropriate theme-based classes\n  const classes = hoverCard3DVariants({\n    theme: activeTheme,\n    size,\n    intensity,\n    hoverEffect,\n    className,\n  });\n  \n  return (\n    <div\n      ref={(node) => {\n        // Handle both the forwarded ref and the internal ref\n        if (ref) {\n          if (typeof ref === 'function') ref(node);\n          else if (ref.current !== undefined) ref.current = node;\n        }\n        cardRef.current = node;\n      }}\n      className={cn(classes)}\n      style={cardStyle}\n      onMouseMove={handleMouseMove}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      {...props}\n    >\n      {children}\n      {glareEnabled && <div ref={glareRef} style={glareStyle} />}\n    </div>\n  );\n}));\n\n// Display name for debugging\nHoverCard3D.displayName = 'HoverCard3D';\n\n// Interface for the themed version\nexport interface HoverCard3DWithThemeProps extends HoverCard3DProps {\n  theme?: HoverCardTheme;\n}\n\n// Wrapped component with ThemeProvider for standalone usage\nconst HoverCard3DWithTheme = memo(forwardRef<HTMLDivElement, HoverCard3DWithThemeProps>(({\n  theme = 'enterprise',\n  children,\n  ...props\n}, ref) => {\n  // Check if we're already within a ThemeProvider\n  let isInsideThemeProvider = false;\n  try {\n    useTheme();\n    isInsideThemeProvider = true;\n  } catch (error) {\n    isInsideThemeProvider = false;\n  }\n\n  // If already in a ThemeProvider, just render the component\n  if (isInsideThemeProvider) {\n    return <HoverCard3D ref={ref} theme={theme} {...props}>{children}</HoverCard3D>;\n  }\n\n  // Otherwise, wrap it in a ThemeProvider\n  return (\n    <ThemeProvider theme={theme}>\n      <HoverCard3D ref={ref} theme={theme} {...props}>{children}</HoverCard3D>\n    </ThemeProvider>\n  );\n}));\n\nHoverCard3DWithTheme.displayName = 'HoverCard3DWithTheme';\n\nexport { HoverCard3D, HoverCard3DWithTheme, hoverCard3DVariants };"],"names":["hoverCard3DVariants","cva","useSafeTheme","useTheme","HoverCard3D","memo","forwardRef","children","className","themeProp","size","intensity","hoverEffect","glareEnabled","rotateReverse","glareOpacity","glareColor","maxRotation","perspective","props","ref","contextTheme","activeTheme","rotateX","setRotateX","useState","rotateY","setRotateY","posX","setPosX","posY","setPosY","isHovering","setIsHovering","cardRef","useRef","glareRef","getIntensityValues","actualMaxRotation","actualPerspective","handleMouseMove","e","rect","centerX","centerY","normalizedX","normalizedY","directionMod","rotX","rotY","glareX","glareY","handleMouseEnter","handleMouseLeave","cardStyle","glareStyle","classes","jsxs","node","cn","jsx","HoverCard3DWithTheme","theme","isInsideThemeProvider","ThemeProvider"],"mappings":"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"}